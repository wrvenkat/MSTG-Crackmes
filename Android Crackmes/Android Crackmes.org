* Android OWASP Crackme
- A list of crackeme exercises are avialble at [[https://github.com/OWASP/owasp-mstg/tree/master/Crackmes][OWASP MSTG Crackme]].
** Level 1
- *Goal*: Bypass the root and debug detection and input the secret string to solve this level.
*** Analysis
**** Runtime
- On installing and running the app, the app throws a "Root Detected! This is unacceptable. The app is going to exit" message.
**** Decompilation
***** Root and Debug Flag Check
- On decompiling and looking at the app, one can find in ~onCreate()~ method of the ~sg.vantagepoint.uncrackable1.MainActivity~ class that ~sg.vantagepoint.a.c~ class's all three root-detection methods are called.
- Immediately afterwards, ~sg.vantagepoint.a.b~ class's ~a()~ method is called for ~debug~ flag check.
- If the both above check pass then the view is created.
***** String Veification
- The ~verify(View)~ method gets the String from the TextBox and passes it to ~sg.vantagepoint.uncrackable1.a~ class's ~boolean a(String)~ method.\\
  This method then calls ~sg.vantagepoint.a.a~ class's ~a(byte[], byte[])~ method. This method calls that method with 2 hardcoded values, the first one is encoded in some format which is decoded by a call to method ~byte[] b(String)~.
- The ~sg.vantagepoint.a.a~ class's ~byte[] a(byte[] key, byte[] value)~ method if you look at it, encrypts ~value~ with ~key~ which makes sense since the ~key~ value is the one that's "obfuscated". The encryption appears to be AES/ECB/PKCS7Padding.
- Finally, the value returned by this method as a String is compared against the entered value and if they're equal, the ~boolean a(String)~ method of class ~sg.vantagepoint.uncrackable1.a~ return true which leads to "Success" message.
*** Solution
- The solution involves ~Frida~ to bypass the [[Root and Debug Flag Check]] and some code in Python or Java to replicate the decode and encrypt process in [[String Verification]].
- Frida Code: ~level1-root_debug_bypass.js~ and decode and encrypt: ~DecodeAndEncrypt.java~.
** Level 2 
- *Goal*: Bypass root, debug and /debugger check/ and input the secret string to solve this level.
*** Analysis
**** Runtime
- On installing and running the app, the app throws a "Root Detected! This is unacceptable. The app is going to exit" message.
**** Decompilation
**** Root and debug check
- On decompilation of the DEX code, one can find that the logic for [[Root and Debug Flag Check]] are the exact same as that of Level 1 but the difference lie in the class naming.\\
  The class that contains the root check methods is called ~sg.vantagepoint.a.b~ with the exact same three methods for root check.\\
  The class that contains the debug flag method is called ~sg.vantagepoint.a.a~ with the same method name.
- These above methods get called in ~onCreate()~ of ~sg.vantagepoint.uncrackable2.MainActivity~.
**** Debugging check
- An additional check that is present in this level is the use of ~Debug.isDebuggerConnected()~ to check for debugger in an ~AsyncTask~ context.
- Within this ~AsyncTask~ context, once ~onPostExecute()~ is triggered, the code inside ~onPostExecute()~ triggers the method ~a()~ of ~sg.vantagepoint.uncrackable2.MainActivity~ which triggers the ~AlertDialog~ and exits the app.
**** String Verification
- Once the above checks all pass, the success condition inside the ~verify(View)~ method is triggered by the statement ~m.a(obj)~. In this, ~m~ is a member variable of ~MainActivity~ that's initialized inside ~onCreate()~ to an instance of ~sg.vantagepoint.uncrackable2.CodeCheck~ and ~a(String)~ being a method of ~CodeCheck~ class.
- The ~a(String)~ method returns the value of method calling ~native~ method ~b()~ with ~b(str.getBytes()~.
***** JNI Use
- This level makes use of JNI functions to hide some verification logic.
- There are 2 native methods in use by the app,
  + ~init()~ called inside ~MainActivity~'s ~onCreate()~
  + ~b(byte[])~ called by ~CodeCheck~'s ~a(String)~ method.
- ~MainActivity~'s static initializer is responsible for loading the native library named ~foo~ using the dynamically resolved loading method ~System.load()~.
- The app makes use of dynamic linking to resolve the called methods.
****** libfoo
- The native method counterparts are,
  + ~init()~ maps to ~Java_sg_vantagepoint_uncrackable2_MainActivity_init()~
  + ~b()~ maps to ~Java_sg_vantagepoint_uncrackable2_CodeCheck_bar()~
- ~Java_sg_vantagepoint_uncrackable2_MainActivity_init()~
  #+BEGIN_EXAMPLE -n C
  DAT_00014008 = fork();
  if (DAT_00014008 == 0) {
    __pid = getppid();
    lVar1 = ptrace(PTRACE_ATTACH,__pid,0,0);
    if (lVar1 == 0) {
      waitpid(__pid,(int *)&local_20,0);
      while( true ) {
        ptrace(PTRACE_CONT,__pid,0,0);
        _Var2 = waitpid(__pid,(int *)&local_20,0);
        if (_Var2 == 0) break;
        if ((local_20 & 0x7f) != 0x7f) {
                    /* WARNING: Subroutine does not return */
          _exit(0);
        }
      }
    }
  }
  else {
    pthread_create(&pStack36,(pthread_attr_t *)0x0,(__start_routine *)&LAB_00010914+1,(void *)0x0);
  }
  #+END_EXAMPLE
  - The code for ~init()~ performs the following
    + ~fork()~ a process,
    + In the child process (~DAT_00014008 == 0~), gets the process id of the child using ~getpid()~.
    + Performs a ~ptrace()~ on the ~pid~ , i.e attach ~ptrace~ on itself which when if it returns 0, we await a return using ~waitpid()~ which is used to wait for state change in a tracee.\\
      When ~waitpid~ returns, this means we've successfully started tracing the ~pid~. So, then what we do is, within the ~while(true)~ loop, we continuously trace the same ~pid~ using a ~ptrace()~, ~waitpid()~ stacked call.\\
      When ~Var2~ equals 0, it means that the child didnt' change state (see ~man waitpid~ and [[https://stackoverflow.com/questions/21484410/waitpid-returns-pid-0-and-wifexited-1-how-to-get-pid][waitpid returns 0]]), then we break out of the ~while~ loop.\\
      If not, this means the ~status~ or ~wstatus~ to ~waitpid~ has changed which means we can examine the status code in variable ~local_20~. This, when examined if when a bitwise & with hex equivalent of 127 is not equal to 127, then we ~exit(0)~.\\
      \\
      This 127 value and the expression ~(local_20 & 0x7f)~ is a macro which is equivalent to ~define WTERMSIG(x) ((x) & 0x7f)~ from [[https://android.googlesource.com/platform/external/bison/+/05436638acc7c010349a69c3395f1a57c642dc62/lib/sys_wait.in.h][sys_wait.in.h]]. Essentially, this means that if the child has been terminated, then we can exit child using ~_exit(0)~. See [[https://man7.org/linux/man-pages/man2/_exit.2.html][_exit()]] and more importantly [[https://stackoverflow.com/questions/5422831/what-is-the-difference-between-using-exit-exit-in-a-conventional-linux-fo][_exit on child process]].
  - If the code is not in a child process, i.e ~(DAT_00014008 != 0)~, then we spawn a thread using ~pthread_create()~ on the routine at location ~&LAB_00010914+1~.//
    This code at ~&LAB_00010914+1~ is another function which does ~waitpid~ on the same return value from the initial ~fork()~ call, and ~pthread_exit()~ with the below code.
    #+BEGIN_EXAMPLE -n C
    int local_c;
    waitpid(DAT_00014008,(int *)&stack0xfffffff4,0);
     
    if (local_c == 0xb) {
         /* WARNING: Subroutine does not return */
	 pthread_exit((void *)0x0);
    }
    /* WARNING: Subroutine does not return */
    _exit(0);
    #+END_EXAMPLE
- ~Java_sg_vantagepoint_uncrackable2_CodeCheck_bar()~
  + This function uses the JNI functions ~GetByteArrayElements~ and ~GetArrayLength~ to get the elements and the length.
  + Then perform an ~strncmp~ for size 0x17 i.e 23 bytes against the static byte values inside the native ~init()~.\\
    It is important to note that the integer variables which are indicated in the decompiled code below are all little endian meaning the LSB is stored first or appears first. See [[https://en.wikipedia.org/wiki/Endianness][endianness]].
    #+BEGIN_EXAMPLE -n C
    local_34 = 0x6e616854;
    local_30 = 0x6620736b;
    local_2c = 0x6120726f;
    local_28 = 0x74206c6c;
    local_24 = 0x6568;
    local_22 = 0x73696620;
    local_1e = 0x68;
    __s1 = (*(*param_1)->GetByteArrayElements)((JNIEnv *)param_1,param_3,(jboolean *)0x0);
    jVar1 = (*(*param_1)->GetArrayLength)((JNIEnv *)param_1,(jarray)param_3);
    if ((jVar1 == 0x17) && (iVar2 = strncmp(__s1,(char *)&local_34,0x17), iVar2 == 0)) {
      uVar3 = 1;
    ...
    #+END_EXAMPLE
  + Decoding the above value properly provides the solution ~Thanks for all the fish~.
*** Solution
- The root and debug flag check can be bypassed in the regular known way using Frida - ~level2-root_debug_bypass.js~
- The solution that decodes the LE to BE string is in ~bytes_to_str.py~.
- The ~StrToBytes.java~ contains sample code to show how to convert ~String~ to ~byte~ in Java.
** Level 3
- The crackme from hell!
- *Goal* - A secret string is hidden somewhere in this app. Find a way to extract it.
*** Analysis
**** Runtime
- On installing and running on a rooted device, the app throws a "Rooting or tampering detected. This is unacceptable. The app is now going to exit." message.
***** Crash Dump
- It should be noted that when spawning the app with frida, the app crashes and the crash dump offers the following backtrace,
  #+BEGIN_EXAMPLE
  backtrace:
    #00 pc 0000000000000384  /system/lib64/libc.so (offset 0x6d000)
    #01 pc 000000000000308c  /data/app/owasp.mstg.uncrackable3-l7S9fJCPcVQclNyLgavEAg==/lib/arm64/libfoo.so (goodbye()+12)
    #02 pc 00000000000031ac  /data/app/owasp.mstg.uncrackable3-l7S9fJCPcVQclNyLgavEAg==/lib/arm64/libfoo.so
    #03 pc 0000000000040c94  /system/lib64/libc.so (offset 0x29000)
  #+END_EXAMPLE
**** Decompilation
***** Root and Debug Flag Check 
- The root and debug flag check appear to be exactly the same as in the previous crackmes.
***** Additional Checks
- In addition to the existing root and debug flag check, one can find that inside ~onCreate()~, we can find calls to ~verifyLibs()~ and ~init(xorkey.getBytes())~.
- ~verifyLibs()~
  + This method appears to check the CRC value of the packaged native libs and the ~classes.dex~ file against hardcoded values.
  + If the calculated CRC value doesn't match against the one hardcoded, then a ~tampered~ variable flag is set.
  + This ~tampered~ value is checked in the root and debug flag check steps.
- ~init(xorkey.getBytes())~
  + The ~init()~ method is a native method which accepts a byte array. The details of this will be discussed in the native section.
***** Native Libs
- From the analysis of the APK's decompilation, we can find that there are 3 native functions that are referred to in Java - ~init(bytes)~, ~void baz()~ and ~bar(bytes)~ from ~libfoo.so~.
- ~init(bytes)~
  + This function accepts a byte array which on the native side, is copied to a global variable.
  + This would appear to be one part of the 'key' in XORing.
- ~baz()~
  + This function merely returns the CRC value of ~classes.dex~ which is used in the ~verifyLibs()~ call.
- ~bar(bytes)~
  + This function accepts a byte array and is used to check the user provided value to solve this crack me.
  + The provided byte array is looped through and each byte is checked against the XOR'd value provided to ~init(bytes)~ and the value returned from a special function @ offset 0x10e0 which shows up as ~FUN_001010e0~ in Ghidra.
  + If the values match, the function returns true by returning 1. 0 or false otherwise.
- ~FUN_001010e0(pointer)~
  + This function is used by ~bar(bytes)~ to get a special value that is used to XOR against a key received from Java side.
  + Towards the end of the function, this hardcoded value is populated to the provided pointer and returned.
***** Runtime Frida detection
- While the root and debug check and the user provided input verification logic seem to make sense, attaching fridato bypass some of the protections proved as a challenge initially.
- The issue here is that this check starts heppening as ~libfoo.so~ is being loaded. The sections ~.INIT_ARRAY~ and ~.FINI_ARRAY~ in an ELF binary point to functions that will be run, in order by ~dlopen()~ and ~dlclose()~.
  + The function pointed to by the entry in ~.INIT_ARRAY~ creates a ~pthread~ on the function ~FUN_001030d0()~. See [[https://wiki.osdev.org/Calling_Global_Constructors][here]], [[https://github.com/lattera/glibc/blob/a2f34833b1042d5d8eeb263b4cf4caaea138c4ad/elf/dl-init.c#L73-L86][here]], [[https://github.com/lief-project/LIEF/issues/118][here]], [[https://www.gamedev.net/forums/topic/213849-linux-so-files-entry-point/][here]] and [[http://dandylife.net/blog/archives/686][here]].
  + The function ~FUN_001030d0()~ does the following to detect if frida or xposed are present as part of the process's memory.
    - Opens and reads ~/self/proc/maps~. Triggers termination through the ~goodbye()~ function if ~/self/proc/maps~ cannot be read.
    - It then loops through the read content looking for the presense of strings ~xposed~ and ~frida~ continuously reading from ~/self/proc/maps~ and checking for ~frida~ or ~xposed~ presence terminating only if either of them are found. If any such strings are found, termination is again by calling ~goodbye()~.
    - The ~goodbye()~ function calls ~raise(6)~ which corresponds to the signal ~SIGABRT~ causing termination.
    - This makes sense corresponding to the [[Crash Dump]] backtrace received for app termination which shows what triggered the termination/crash.
- The issue here is that, we can't hook onto these non-exported functions in the lib unless we know their actual addresses and keep frida hooked throughout the process.
- Unforunately, due to the native lib constantly checking for frida's presence, we cannot proceed much further about hooking the necessary locations to get what we need.
*** Solution
- Fortunately for us, the librray's frida check depends on external functions from libs that are already loaded. So, to trick the lib's function into thinking that frida's not present, we've more thatn one way of doing this. In the solution, it is done by hooking ~strstr()~ and always returning ~NULL~ so that, that particular thread keeps checkin for the presence and does nothing else.
- Once, this is done, we can conveniently hook at all other internal functions by providing their absolute address calculating them by adding their offsets to the module's base address.
- Once this is done, we can hook and read the special value populated by function ~FUN_001010e0~.
- Solution is present in ~level3-loadLibraryHook.js~ file.

